{
    "docs": [
        {
            "location": "/about/03_spring-core",
            "text": "",
            "title": "Core Spring Framework"
        },
        {
            "location": "/dev/06_history",
            "text": " Source and Documentation Contributors Gunnar Hillert Global and Cross-Module Changes Change Licensing to UPL Completely refactor bootstrapping mechanism using the new Coherence Bootstrap API Add Spring Cache abstraction support ",
            "title": "Version 3.0.0-SNAPSHOT built on2 2021-04-04 05:22"
        },
        {
            "location": "/dev/06_history",
            "text": " Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes Issue #8 : Ensured compliance with Coherence 12.1.2 and 12.1.3 (for building and running) and 12.2.1 (for running) Issue #9 : Upgraded to use Spring Framework 4.3.9 Issue #10 : Upgraded to require Java 7 Issue #11 : Made Spring Framework dependencies scope \"provided\" Issue #13 : Introduced the SpringBasedCoherenceSession to provide a mechanism to configure and acquire Coherence-based resources (NamedCaches) from Coherence without using static functions or methods. Issue #15 : Provided access to Coherence Services via the SpringBasedCoherenceSession Issue #16 : Resolved incorrect XSD declaration of spring:property Issue #17 : Migrated to use Maven Central (from maven.java.net) ",
            "title": "Version 2.0.0-SNAPSHOT built on 2017-07-13 20:03"
        },
        {
            "location": "/dev/06_history",
            "text": " Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes COHSPR-8 : Upgraded to use Coherence 12.1.2-0-4 (and certified against Coherence 12.1.3-0-2) ",
            "title": "Version 1.0.2 built on 2015-08-06 20:45"
        },
        {
            "location": "/dev/06_history",
            "text": " Acknowledgements Huge thanks to everyone that provided feedback, isolated defects and contributed fixes. Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes Upgraded Maven Plug-ins The coherence-spring Module COHSPR-5 : Resolved issue where multiple CoherenceApplicationContexts were created during concurrent initialization. ",
            "title": "Version: 1.0.1 built on 2014-11-04 11:09"
        },
        {
            "location": "/dev/06_history",
            "text": " Acknowledgements Huge thanks to everyone that contributed feedback, suggestions, documentation and ideas for this initial release. Source and Documentation Contributors Brian Oliver and Patrick Peralta Global and Cross-Module Changes Initial Release The coherence-spring Module Initial Release. The coherence-spring-tests Module Initial Release. ",
            "title": "Version: 1.0.0 built on 2013-09-10 13:35"
        },
        {
            "location": "/dev/06_history",
            "text": " The following sections outline Coherence Spring project changes in reverse chronological order. Version 3.0.0-SNAPSHOT built on2 2021-04-04 05:22 Source and Documentation Contributors Gunnar Hillert Global and Cross-Module Changes Change Licensing to UPL Completely refactor bootstrapping mechanism using the new Coherence Bootstrap API Add Spring Cache abstraction support Version 2.0.0-SNAPSHOT built on 2017-07-13 20:03 Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes Issue #8 : Ensured compliance with Coherence 12.1.2 and 12.1.3 (for building and running) and 12.2.1 (for running) Issue #9 : Upgraded to use Spring Framework 4.3.9 Issue #10 : Upgraded to require Java 7 Issue #11 : Made Spring Framework dependencies scope \"provided\" Issue #13 : Introduced the SpringBasedCoherenceSession to provide a mechanism to configure and acquire Coherence-based resources (NamedCaches) from Coherence without using static functions or methods. Issue #15 : Provided access to Coherence Services via the SpringBasedCoherenceSession Issue #16 : Resolved incorrect XSD declaration of spring:property Issue #17 : Migrated to use Maven Central (from maven.java.net) Version 1.0.2 built on 2015-08-06 20:45 Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes COHSPR-8 : Upgraded to use Coherence 12.1.2-0-4 (and certified against Coherence 12.1.3-0-2) Version: 1.0.1 built on 2014-11-04 11:09 Acknowledgements Huge thanks to everyone that provided feedback, isolated defects and contributed fixes. Source and Documentation Contributors Brian Oliver Global and Cross-Module Changes Upgraded Maven Plug-ins The coherence-spring Module COHSPR-5 : Resolved issue where multiple CoherenceApplicationContexts were created during concurrent initialization. Version: 1.0.0 built on 2013-09-10 13:35 Acknowledgements Huge thanks to everyone that contributed feedback, suggestions, documentation and ideas for this initial release. Source and Documentation Contributors Brian Oliver and Patrick Peralta Global and Cross-Module Changes Initial Release The coherence-spring Module Initial Release. The coherence-spring-tests Module Initial Release. ",
            "title": "Change History"
        },
        {
            "location": "/about/01_overview",
            "text": " The Coherence Spring project provides mechanisms for application developers to integrate Oracle Coherence and Spring-based applications. ",
            "title": "Overview"
        },
        {
            "location": "/about/01_overview",
            "text": " eco Spring Core Core Spring Framework Support power_settings_new Spring Boot Autoconfiguration Support cached Spring Cache Spring&#8217;s Caching Abstraction Support fa-database Spring Session Spring&#8217;s Session Abstraction settings Spring Config Server Centralize Configuration inventory Spring Data Use Coherence as a Spring Data Repository ",
            "title": "Components"
        },
        {
            "location": "/about/01_overview",
            "text": " text_snippet HTML Reference Documentation. text_snippet Single Page HTML Reference Documentation. picture_as_pdf PDF Reference Documentation. code Javadocs Browse the Coherence Spring JavaDocs. ",
            "title": "Reference Documentation"
        },
        {
            "location": "/about/06_spring-session",
            "text": "",
            "title": "Spring Session"
        },
        {
            "location": "/dev/07_getting-help",
            "text": " The Coherence Slack channel is the best place to start asking questions - should you need to. Join Slack at: https://join.slack.com/t/oraclecoherence/shared_invite/enQtNzcxNTQwMTAzNjE4LTJkZWI5ZDkzNGEzOTllZDgwZDU3NGM2YjY5YWYwMzM3ODdkNTU2NmNmNDFhOWIxMDZlNjg2MzE3NmMxZWMxMWE ",
            "title": "Slack"
        },
        {
            "location": "/dev/07_getting-help",
            "text": " As all of the source code, including tests and examples are now published, these are often a great place to start for implementation tips. The source code is located here: https://github.com/coherence-community/coherence-spring-integration ",
            "title": "Source Code, Tests and Examples"
        },
        {
            "location": "/dev/07_getting-help",
            "text": " If you find an issue with the Coherence Spring project or have an idea for a new feature the best place to start is with the Issue Tracking System. All issues, both current and past are publicly viewable. The Issue Tracking System can be found here: https://github.com/coherence-community/coherence-spring/issues ",
            "title": "Issue Tracking System"
        },
        {
            "location": "/dev/07_getting-help",
            "text": " Alternatively Oracle Coherence customers can file Support Requests (SR) against the Coherence Product, clearly specifying that requests are for a Coherence Community project. ",
            "title": "Oracle Support"
        },
        {
            "location": "/dev/07_getting-help",
            "text": " There are many avenues to receive help when using the Coherence Spring project. Here are a few options. Slack The Coherence Slack channel is the best place to start asking questions - should you need to. Join Slack at: https://join.slack.com/t/oraclecoherence/shared_invite/enQtNzcxNTQwMTAzNjE4LTJkZWI5ZDkzNGEzOTllZDgwZDU3NGM2YjY5YWYwMzM3ODdkNTU2NmNmNDFhOWIxMDZlNjg2MzE3NmMxZWMxMWE Source Code, Tests and Examples As all of the source code, including tests and examples are now published, these are often a great place to start for implementation tips. The source code is located here: https://github.com/coherence-community/coherence-spring-integration Issue Tracking System If you find an issue with the Coherence Spring project or have an idea for a new feature the best place to start is with the Issue Tracking System. All issues, both current and past are publicly viewable. The Issue Tracking System can be found here: https://github.com/coherence-community/coherence-spring/issues Oracle Support Alternatively Oracle Coherence customers can file Support Requests (SR) against the Coherence Product, clearly specifying that requests are for a Coherence Community project. ",
            "title": "Getting Help"
        },
        {
            "location": "/about/07_spring-config-server",
            "text": "",
            "title": "Spring Config Server"
        },
        {
            "location": "/dev/02_source-code",
            "text": " The Source Code for the Oracle Coherence Spring Integration is hosted by github.com . It is located here: https://github.com/coherence-community/coherence-spring Alternatively if you&#8217;re not using or want to avoid setting up git can download a zip containing of the latest development branch from here: https://github.com/coherence-community/coherence-spring/archive/master.zip The branching model adopted for development and releases is as outlined by Vincent Driessen in A successful Git branching model Important Source Code and Documentation is licensed under CDDL-1.0 . Read-Only Access is provided to the public. Pull Requests are welcome as long as you become a official contributor ) ",
            "title": "Source Code"
        },
        {
            "location": "/about/04_spring-boot",
            "text": "",
            "title": "Spring Boot"
        },
        {
            "location": "/dev/05_contributions",
            "text": " Developing code and documentation for the Coherence Spring project is a big deal . While it may seemingly be a place to develop and possibly experiment with patterns or solutions, the fact of the matter is that the Coherence Community frequently adopts the styles, approaches and implementations provided by the Coherence Spring , whether in total or in part, for use in production scenarios. Consequently every effort has to be made to ensure that projects are somewhat stable, not too experimental and offer a high-degree of reliability, scalability and stability, something that people can trust if they decide to branch or become inspired by said projects on their own. Foremostly the Coherence Spring project is not designed to be a \"holding zone\" for individually or corporately developed utilities based on Coherence. While these may be of interest to individuals, we carefully investigate utility of these solutions before considering them for inclusion. In most cases we instead encourage developers to define their own \"common\" projects. ",
            "title": "Overview"
        },
        {
            "location": "/dev/05_contributions",
            "text": " Contributing to the Coherence Spring project can be done in various ways, each of which is valuable to the Coherence Community as a whole. Contributions may include helping out by answering questions on the forums, isolating and submitting defects resolution requests, proposing or submitting defect resolutions (fixes), suggesting or building enhancements, introducing new features and improving tests and documentation. For all contributions that involve making a change to the source tree and thus releasing a new build of the Coherence Spring project, those primarily being a defect fix, enhancement, new feature or documentation improvement, all non-Oracle contributors must complete and sign the Oracle Contributors Agreement . To do this, simply print out the form, fill in the necessary details, scan it in and return via email to: oracle-ca_us [at] oracle [dot] com. Note 1: For the \"Project Name:\" please write \"Coherence\". Note 2: This is the same agreement used for making contributions to GlassFish and Java itself. If you already have executed this agreement then you&#8217;re ready to contribute to the Coherence Spring project. Should you have any questions regarding this agreement, you should consult the Oracle Contributors Agreement FAQ ",
            "title": "Becoming a Contributor"
        },
        {
            "location": "/dev/05_contributions",
            "text": " As mentioned above, there are quite a few ways to participate on projects that are part of the Coherence Spring project, and not all of them involve contributing source code! Simply using the software, participating on mailing lists or forums, filing bug reports or enhancement requests are an incredibly valuable form of participation. If one were to break down the forms of participation for the Coherence Spring project into a set of roles, the result would look something like this: Users, Contributors, Committers, Maintainers, and Project Leads. Users: Users are the people who use the software. Users are using the software, reporting bugs, making feature requests and suggestions. This is by far the most important category of people. Without users, there is no reason for the project. How to become one: Download the software and use it to build an application. Contributors: Contributors are individuals who contribute to an Coherence Spring project, but do not have write access to the source tree. Contributions can be in the form of source code patches, new code, or bug reports, but could also include web site content like articles, FAQs, or screenshots. A contributor who has sent in solid, useful source code patches on a project can be elevated to Committer status by a Maintainer. Integration of a Contributor submissions done at the discretion of a Maintainer, but this is an iterative, communicative process. Note that for code to be integrated, a completed Oracle Contribution Agreement is required from each contributor. How to become one: Contribute in any of the ways described above: either code, examples, web site updates, tests, bugs, and patches. If you&#8217;re interested in becoming a Committer to the source base, get the sources to the project, make an improvement or fix a bug, and send that code to the developers mailing list or attach it to the bug report in the project issue tracking system. Committers: Committers have write access to the source tree, either for the individual modules they are working on, or in some cases global write permissions everywhere in the source code management system. A Committer must first become a Contributor before they can be granted access to commit to the source tree. Rules for how to commit, once you have commit access, will vary by project and module. Be sure to ask before you start making changes! How to become one: Submit some patches via email, and ask the Maintainer of the code you&#8217;ve patched for commit access. The Maintainer will seek consensus before granting Committer access, but their decisions are final. Maintainers: Each module has one Maintainer, who has check-in permissions (either for that module or globally), and \"manages\" a group of Committers. They are responsible for merging contributed patches, bug fixes, and new code from the development branch of the source tree into the stable branch. Maintainers are responsible for making sure that these contributions do not break the build. The Maintainer is also responsible for checking that everyone who contributes code has submitted an Oracle Contribution Agreement. A Maintainer is responsible for their module, and for granting check-in privileges to Contributors. They also act as the \"police force\" of the module, helping to ensure quality across the build. How to become one: Start a module (you need to have written some working code on your project to do this, you&#8217;ll also need to talk to the Project Lead). Have responsibility for that module handed over to you from the current Maintainer. Take over an abandoned project&#8212;&#8203;sometimes someone starts something, but for one reason or another can&#8217;t continue to work on it. If it&#8217;s interesting to you, volunteer! Project Lead: Each project in the Coherence Spring project has an overall Project Lead. The Project Leads are currently appointed by Oracle. They are responsible for managing the entire project, helping to create policies by consensus that ensure global quality. ",
            "title": "Roles and Responsibilities"
        },
        {
            "location": "/dev/05_contributions",
            "text": " All contributors are required to be a Committer in order to commit contributions to the Coherence Spring project, including documentation. To become a Committer you must first clearly demonstrate both skill as a developer and be capable of strictly adhering to the quality and architectural requirements of the Coherence Spring project. In order to demonstrate these abilities, it&#8217;s best to get started by submitting patches or improvements via email and then asking the Maintainer or Project Lead to review said changes, after which they may be accepted and submitted (either by the Maintainer or Project Lead). Coherence Spring follows the Spring coding conventions. ",
            "title": "Making a Contribution"
        },
        {
            "location": "/dev/05_contributions",
            "text": " The following sections outline the requirements for making contributions to the Coherence Spring project. Overview Developing code and documentation for the Coherence Spring project is a big deal . While it may seemingly be a place to develop and possibly experiment with patterns or solutions, the fact of the matter is that the Coherence Community frequently adopts the styles, approaches and implementations provided by the Coherence Spring , whether in total or in part, for use in production scenarios. Consequently every effort has to be made to ensure that projects are somewhat stable, not too experimental and offer a high-degree of reliability, scalability and stability, something that people can trust if they decide to branch or become inspired by said projects on their own. Foremostly the Coherence Spring project is not designed to be a \"holding zone\" for individually or corporately developed utilities based on Coherence. While these may be of interest to individuals, we carefully investigate utility of these solutions before considering them for inclusion. In most cases we instead encourage developers to define their own \"common\" projects. Becoming a Contributor Contributing to the Coherence Spring project can be done in various ways, each of which is valuable to the Coherence Community as a whole. Contributions may include helping out by answering questions on the forums, isolating and submitting defects resolution requests, proposing or submitting defect resolutions (fixes), suggesting or building enhancements, introducing new features and improving tests and documentation. For all contributions that involve making a change to the source tree and thus releasing a new build of the Coherence Spring project, those primarily being a defect fix, enhancement, new feature or documentation improvement, all non-Oracle contributors must complete and sign the Oracle Contributors Agreement . To do this, simply print out the form, fill in the necessary details, scan it in and return via email to: oracle-ca_us [at] oracle [dot] com. Note 1: For the \"Project Name:\" please write \"Coherence\". Note 2: This is the same agreement used for making contributions to GlassFish and Java itself. If you already have executed this agreement then you&#8217;re ready to contribute to the Coherence Spring project. Should you have any questions regarding this agreement, you should consult the Oracle Contributors Agreement FAQ Roles and Responsibilities As mentioned above, there are quite a few ways to participate on projects that are part of the Coherence Spring project, and not all of them involve contributing source code! Simply using the software, participating on mailing lists or forums, filing bug reports or enhancement requests are an incredibly valuable form of participation. If one were to break down the forms of participation for the Coherence Spring project into a set of roles, the result would look something like this: Users, Contributors, Committers, Maintainers, and Project Leads. Users: Users are the people who use the software. Users are using the software, reporting bugs, making feature requests and suggestions. This is by far the most important category of people. Without users, there is no reason for the project. How to become one: Download the software and use it to build an application. Contributors: Contributors are individuals who contribute to an Coherence Spring project, but do not have write access to the source tree. Contributions can be in the form of source code patches, new code, or bug reports, but could also include web site content like articles, FAQs, or screenshots. A contributor who has sent in solid, useful source code patches on a project can be elevated to Committer status by a Maintainer. Integration of a Contributor submissions done at the discretion of a Maintainer, but this is an iterative, communicative process. Note that for code to be integrated, a completed Oracle Contribution Agreement is required from each contributor. How to become one: Contribute in any of the ways described above: either code, examples, web site updates, tests, bugs, and patches. If you&#8217;re interested in becoming a Committer to the source base, get the sources to the project, make an improvement or fix a bug, and send that code to the developers mailing list or attach it to the bug report in the project issue tracking system. Committers: Committers have write access to the source tree, either for the individual modules they are working on, or in some cases global write permissions everywhere in the source code management system. A Committer must first become a Contributor before they can be granted access to commit to the source tree. Rules for how to commit, once you have commit access, will vary by project and module. Be sure to ask before you start making changes! How to become one: Submit some patches via email, and ask the Maintainer of the code you&#8217;ve patched for commit access. The Maintainer will seek consensus before granting Committer access, but their decisions are final. Maintainers: Each module has one Maintainer, who has check-in permissions (either for that module or globally), and \"manages\" a group of Committers. They are responsible for merging contributed patches, bug fixes, and new code from the development branch of the source tree into the stable branch. Maintainers are responsible for making sure that these contributions do not break the build. The Maintainer is also responsible for checking that everyone who contributes code has submitted an Oracle Contribution Agreement. A Maintainer is responsible for their module, and for granting check-in privileges to Contributors. They also act as the \"police force\" of the module, helping to ensure quality across the build. How to become one: Start a module (you need to have written some working code on your project to do this, you&#8217;ll also need to talk to the Project Lead). Have responsibility for that module handed over to you from the current Maintainer. Take over an abandoned project&#8212;&#8203;sometimes someone starts something, but for one reason or another can&#8217;t continue to work on it. If it&#8217;s interesting to you, volunteer! Project Lead: Each project in the Coherence Spring project has an overall Project Lead. The Project Leads are currently appointed by Oracle. They are responsible for managing the entire project, helping to create policies by consensus that ensure global quality. Making a Contribution All contributors are required to be a Committer in order to commit contributions to the Coherence Spring project, including documentation. To become a Committer you must first clearly demonstrate both skill as a developer and be capable of strictly adhering to the quality and architectural requirements of the Coherence Spring project. In order to demonstrate these abilities, it&#8217;s best to get started by submitting patches or improvements via email and then asking the Maintainer or Project Lead to review said changes, after which they may be accepted and submitted (either by the Maintainer or Project Lead). Coherence Spring follows the Spring coding conventions. ",
            "title": "Contributing"
        },
        {
            "location": "/dev/01_license",
            "text": " Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software, associated documentation and/or data (collectively the \"Software\"), free of charge and under any and all copyright rights in the Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both (a) the Software, and (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a \"Larger Work\" to which the Software is contributed by such licensors), without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the Larger Work(s), and to sublicense the foregoing rights on either these or other terms. This license is subject to the following condition: The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "title": "The Universal Permissive License (UPL), Version 1.0"
        },
        {
            "location": "/dev/01_license",
            "text": " Oracle licenses the Oracle Coherence Spring project under the The Universal Permissive License (UPL), Version 1.0 The Universal Permissive License (UPL), Version 1.0 Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software, associated documentation and/or data (collectively the \"Software\"), free of charge and under any and all copyright rights in the Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both (a) the Software, and (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a \"Larger Work\" to which the Software is contributed by such licensors), without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the Larger Work(s), and to sublicense the foregoing rights on either these or other terms. This license is subject to the following condition: The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "title": "License"
        },
        {
            "location": "/dev/04_issue-tracking",
            "text": " The Issue Tracking system for the Coherence Spring project is hosted by github.com . It can be found here: https://github.com/coherence-community/coherence-spring/issues . ",
            "title": "Issue Tracking"
        },
        {
            "location": "/about/08_spring-data",
            "text": "",
            "title": "Spring Data"
        },
        {
            "location": "/dev/08_usage",
            "text": " The Coherence Spring Namespace Handler com.oracle.coherence.spring.SpringNamespaceHandler is a custom extension to Coherence that allows you to configure Coherence to reference existing Spring beans in a cache configuration file instead of creating new instances at runtime. The references to Spring Beans are made declaratively in XML files using the new Spring namespace for Coherence. The schema definitions for the Coherence Spring namespace elements are described in the coherence-spring-config.xsd file. You can find this file in the coherence-spring.jar file. http://); ",
            "title": "The Spring Namespace Handler"
        },
        {
            "location": "/dev/08_usage",
            "text": " To use the Coherence Spring namespace handler, you must declare it in a cache configuration file and then specify a factory for the Spring beans. Use the following Coherence Spring namespace handler declaration in the &lt;cache-config&gt; element of a cache configuration file: xmlns:spring=\"class://com.oracle.coherence.spring.SpringNamespaceHandler\" To ensure proper configuration within the cache configuration file, the XSD file coherence-spring-config.xsd that corresponds with this namespace handler can also be referenced, as illustrated below: &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:spring=\"class://com.oracle.coherence.spring.SpringNamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.spring.SpringNamespaceHandler coherence-spring-config.xsd\"&gt; If your cache configuration must specify an externally provided user class by using a &lt;class-scheme&gt; or &lt;instance&gt; element, then this namespace handler can provide a Spring bean from a BeanFactory . To specify a Spring bean, use the bean and bean-name elements under the &lt;class-scheme&gt; or &lt;instance&gt; element: &lt;class-scheme&gt; &lt;spring:bean&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;/spring:bean&gt; &lt;/class-scheme&gt; You can also use the property attribute to inject properties (including cache configuration macros) into a bean, as illustrated below: &lt;spring:bean&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;spring:property name=\"backingMapManagerContext\"&gt;{manager-context}&lt;/spring:property&gt; &lt;/spring:bean&gt; ",
            "title": "Declaring the Spring Namespace Handler"
        },
        {
            "location": "/dev/08_usage",
            "text": " You can specify the bean factory that provides the Spring beans in one of the following ways: Specify an Application Context in the cache configuration file Specify a Bean Factory as a resource Use the application-context-uri element to specify the location of the Spring application context XML file. Like the cache configuration file, the application context file will be loaded either by using the file system or the classpath. The application-context-uri element also supports URLs as values. In the following example, application-context.xml represents the application context XML file: &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:spring=\"class://com.oracle.coherence.spring. SpringNamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.spring.SpringNamespaceHandler coherence-spring-config.xsd\"&gt; &lt;spring:bean-factory&gt; &lt;spring:application-context-uri&gt;application-context.xml&lt;/spring:application-context-uri&gt; &lt;/spring:bean-factory&gt; Additionally, a Spring bean factory can be manually registered as a resource by using the registerResource method, as illustrated below. In the example, DEFAULT_FACTORY_NAME refers to the default Spring BeanFactory class: ConfigurableCacheFactory factory = CacheFactory.getCacheFactoryBuilder() .getConfigurableCacheFactory(...); factory.getResourceRegistry().registerResource( BeanFactory.class, // type factoryName, // resource name factory, // factory reference null); // optional // ResourceLifecycleObserver If you specify a resource name other than the fully-qualified-name of the BeanFactory.class, then reference that name in the bean element. Use the factory-name element for the name of the custom bean factory and bean-name for the name of the bean. In the example below, the name of the bean factory is \"custom-factory\" and the bean name is \"listener\": &lt;spring:bean&gt; &lt;spring:factory-name&gt;custom-factory&lt;/spring:factory-name&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;/spring:bean&gt; ",
            "title": "Specifying a Factory for Spring Beans"
        },
        {
            "location": "/dev/08_usage",
            "text": " The Oracle Coherence Cache Configuration file coherence-cache-config.xml allows use of the &lt;class-scheme&gt; and &lt;instance&gt; xml elements as mechanisms to specify custom implementations of Coherence interfaces, such as CacheStore and MapListener . Traditionally Oracle Coherence uses these elements to guide the instantiation of developer provided interface implementations in two ways; It can Create a new instance of a specified class Invoke a user-provided factory method to return a specific instance For some applications it may be useful for Coherence to retrieve objects configured in a &lt;class-scheme&gt; element or &lt;instance&gt; element from alternative sources, say for example a Spring BeanFactory instance, instead of creating its own instance. This is especially true for cache servers configured with CacheStore objects running in a standalone JVM, because these CacheStore objects typically must be configured with data sources, connection pools, and so on. Spring provides the ability to configure such data sources for plain Java objects, without requiring Java EE. The Spring Namespace Handler The Coherence Spring Namespace Handler com.oracle.coherence.spring.SpringNamespaceHandler is a custom extension to Coherence that allows you to configure Coherence to reference existing Spring beans in a cache configuration file instead of creating new instances at runtime. The references to Spring Beans are made declaratively in XML files using the new Spring namespace for Coherence. The schema definitions for the Coherence Spring namespace elements are described in the coherence-spring-config.xsd file. You can find this file in the coherence-spring.jar file. http://); Declaring the Spring Namespace Handler To use the Coherence Spring namespace handler, you must declare it in a cache configuration file and then specify a factory for the Spring beans. Use the following Coherence Spring namespace handler declaration in the &lt;cache-config&gt; element of a cache configuration file: xmlns:spring=\"class://com.oracle.coherence.spring.SpringNamespaceHandler\" To ensure proper configuration within the cache configuration file, the XSD file coherence-spring-config.xsd that corresponds with this namespace handler can also be referenced, as illustrated below: &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:spring=\"class://com.oracle.coherence.spring.SpringNamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.spring.SpringNamespaceHandler coherence-spring-config.xsd\"&gt; If your cache configuration must specify an externally provided user class by using a &lt;class-scheme&gt; or &lt;instance&gt; element, then this namespace handler can provide a Spring bean from a BeanFactory . To specify a Spring bean, use the bean and bean-name elements under the &lt;class-scheme&gt; or &lt;instance&gt; element: &lt;class-scheme&gt; &lt;spring:bean&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;/spring:bean&gt; &lt;/class-scheme&gt; You can also use the property attribute to inject properties (including cache configuration macros) into a bean, as illustrated below: &lt;spring:bean&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;spring:property name=\"backingMapManagerContext\"&gt;{manager-context}&lt;/spring:property&gt; &lt;/spring:bean&gt; Specifying a Factory for Spring Beans You can specify the bean factory that provides the Spring beans in one of the following ways: Specify an Application Context in the cache configuration file Specify a Bean Factory as a resource Use the application-context-uri element to specify the location of the Spring application context XML file. Like the cache configuration file, the application context file will be loaded either by using the file system or the classpath. The application-context-uri element also supports URLs as values. In the following example, application-context.xml represents the application context XML file: &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:spring=\"class://com.oracle.coherence.spring. SpringNamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.spring.SpringNamespaceHandler coherence-spring-config.xsd\"&gt; &lt;spring:bean-factory&gt; &lt;spring:application-context-uri&gt;application-context.xml&lt;/spring:application-context-uri&gt; &lt;/spring:bean-factory&gt; Additionally, a Spring bean factory can be manually registered as a resource by using the registerResource method, as illustrated below. In the example, DEFAULT_FACTORY_NAME refers to the default Spring BeanFactory class: ConfigurableCacheFactory factory = CacheFactory.getCacheFactoryBuilder() .getConfigurableCacheFactory(...); factory.getResourceRegistry().registerResource( BeanFactory.class, // type factoryName, // resource name factory, // factory reference null); // optional // ResourceLifecycleObserver If you specify a resource name other than the fully-qualified-name of the BeanFactory.class, then reference that name in the bean element. Use the factory-name element for the name of the custom bean factory and bean-name for the name of the bean. In the example below, the name of the bean factory is \"custom-factory\" and the bean name is \"listener\": &lt;spring:bean&gt; &lt;spring:factory-name&gt;custom-factory&lt;/spring:factory-name&gt; &lt;spring:bean-name&gt;listener&lt;/spring:bean-name&gt; &lt;/spring:bean&gt; ",
            "title": "Usage"
        },
        {
            "location": "/about/05_spring-cache",
            "text": "",
            "title": "Spring Cache"
        }
 ]
}